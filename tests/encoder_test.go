package tests

import (
    "encoding/hex"
    "testing"
    . "seth_cli/client"
    "github.com/grkvlt/sawtooth-go-sdk/signing"
)

var (
  data = []byte{0x01, 0x02, 0x03}
  PRIV_HEX = "274AAF0BFAF68C5F1CB510D2851A71CF720C7218A2C1637D635F6850FF009774"
  ENCDED="0ab40a0aca020aaaf030aa4020a423033356531646533303438613632663966343738343430613232666437363535623830663061616339393762653936336231313961633534623362666465613362371a0361626322033132332a0364656632033132333a036465664aa030102031aaf030aa4020a423033356531646533303438613632663966343738343430613232666437363535623830663061616339393762653936336231313961633534623362666465613362371a0361626322033132332a0364656632033435363a036768694aa03010203"
)

func TestEncoder(t *testing.T) {
    private_key, _ := hex.DecodeString(PRIV_HEX)
    encoder := NewEncoder(private_key, TransactionParams{
        FamilyName: "abc",
        FamilyVersion: "123",
        Inputs: []string{"def"},
    })

    txn1 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "123",
        Outputs: []string{"def"},
    })

    priv := signing.NewSecp256k1PrivateKey(private_key)
    pubstr := signing.NewSecp256k1Context().GetPublicKey(priv).AsHex()
    txn2 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "456",
        Outputs: []string{"ghi"},
        BatcherPublicKey: pubstr,
    })

    // Test serialization
    txns, err := ParseTransactions(SerializeTransactions([]*Transaction{txn1, txn2}))
    if err != nil {
        t.Error(err)
    }

    batch := encoder.NewBatch(txns)

    // Test serialization
    batches, err := ParseBatches(SerializeBatches([]*Batch{batch}))
    if err != nil {
        t.Error(err)
    }
    data := SerializeBatches(batches)
    datastr := hex.EncodeToString(data)

    expected := ENCDED

    if datastr != expected {
        t.Error("Did not correctly encode batch. Got", datastr)
    }
}
