..
   Copyright 2017 Intel Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

***************
Getting Started
***************

Getting Seth
============

Seth is packaged separately from the rest of the Sawtooth project. Currently
the best way to run Seth is to build it from source. Building Seth requires
an environment that has the Docker Engine installed and that can run bash
scripts.

To get Seth, clone the GitHub repository and run the build script::

    $ git clone https://github.com/hyperledger/sawtooth-seth
    $ cd sawtooth-seth
    $ ./bin/build_all

This will produce the Docker image that we will use to interact with Seth.

Starting Up Seth
================

The repo also includes a Docker Compose file for starting up a development
environment with Sawtooth and Seth. To start the environment, do::

    $ docker-compose up

This starts up all the components necessary to begin interacting with Seth. Each
of the components is started inside of a Docker container. The following ports
are exposed on the host for interacting with the containers once startup is
complete:

+-----------+--------------------------+
| Host Port | Service                  |
+===========+==========================+
|   8080    | Sawtooth REST API Server |
+-----------+--------------------------+
|   3030    | Seth-RPC Server          |
+-----------+--------------------------+

You can verify that these services are working by submitting an HTTP request to
them. For the REST API, do::

    $ curl http://0.0.0.0:8080/blocks

You should receive a JSON object containing a list of blocks. For the Seth-RPC
server, do::

    $ curl http://0.0.0.0:3030 -d '{"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber"}' \
    -H "Content-Type: application/json"

You should receive a JSON object with the number of the current block, in hex,
in the "result" key.

Creating an Account
===================

Generating a Key Pair
---------------------

In order to interact with Seth, we need to create an external account on the
network. Creating an account is equivalent to generating a new private key that
Seth can understand. Seth accepts secp256k1 private keys in one of two formats:

- A plaintext base58 encoded private key, such as those generated by
  ``sawtooth keygen``.
- A PEM encoded private key with or without a password, such as those generated
  with the ``openssl`` command.

The following shows you how to generate a PEM encoded key that has been
encrypted with a password. If you would like to use a private key generated with
the ``sawtooth keygen`` command, it must be copied from the ``validator``
container where it was created.

OpenSSL is already installed in the Docker container running the Seth-RPC
server, so we can just connect to the container and run the command from there.
Do the following to start up a shell in that container::

    $ docker exec -it seth-rpc bash

You should now be logged in as root in the container. From this shell, you can
generate a new, password-encrypted key with the following::

    $ openssl ecparam -genkey -name secp256k1 | openssl ec -out alias.pem -aes128

You can use any encryption cipher by changing the final ``-aes128`` flag or omit
the flag and to generate a key without it being encrypted. Note that the name of
the key file must be the same as the alias the account is imported as.

Now we are ready to set up the account on the network. To do this, we need to
use the ``seth`` command. From the prompt where you generated the key, run::

    $ seth account import alias.pem alias

This will copy your key to an internal directory and create an alias for the key
which you will use to reference the key in future commands. Finally, to submit
a transaction to the network to create your account, do::

    $ seth account create --nonce=0 --wait alias

The command should print the address of your newly created account upon success.
This will be a (40 character) hex string. You can verify that the account has
been created by running::

    $ seth show account {address}

This will print out some information stored in state about your account. Since
this is not a contract account, there won't be a lot there but the address of
the account and the nonce of the account should be displayed.
